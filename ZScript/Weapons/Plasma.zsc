CLASS Plasma_Gun : BrutalWeapon
{
 bool Inspected;
 int  ChargedAltFire;
 DEFAULT
 {
   Weapon.SelectionOrder 110;
	Weapon.AmmoUse1 0;
	Weapon.AmmoGive1 0;
	Weapon.AmmoUse2 0;
	Weapon.AmmoGive2 0;
    Inventory.PickupSound "PLSDRAW";
	Weapon.AmmoType1 "AmmoCell";
	Weapon.AmmoType2 "PlasmaAmmo";
    +WEAPON.NOAUTOAIM;
	+FORCEXYBILLBOARD;
	Tag "Plasma Rifle";
	Obituary "%o was turned into ash by %k's Plasma Gun.";
	Inventory.PickupMessage "Plasma Gun";
	Inventory.Icon "PLASA0";
}
	States
	{
	
	PuristGun:
		TNT1 A 1;
		PLSN A 0 A_GiveInventory("ClassicPlasmaRifle", 1);
		PLSN A 0 A_TakeInventory("Plasma_Gun", 1);
		PLSN A 0 A_TakeInventory("DualPlasmaRifles", 1);
		TNT1 A 10;
		Goto Ready;
		
	
	Ready3:
	Ready:
	    TNT1 A 0
		{
		If(CountInv("PlasmaAmmo") >=51 ) {return resolvestate("FixAmmo");}
		Else {return resolvestate(null);}
		}
		TNT1 A 0
		{
		 // Set this back to 0 so it doesn't Mess up our day.
		 Invoker.ChargedAltFire = 0;
		}
        PLSN A 1 A_WeaponReady(WRF_ALLOWRELOAD);
		PLSN A 0 A_Giveinventory("HasPlasmaWeapon",1);
        PLSN A 0 A_JumpIfInventory("Kicking",1,"DoKick");
        PLSN A 0 A_JumpIfInventory("Taunting",1,"Taunt");
		PLSN A 0 A_JumpIfInventory("Salute1", 1, "Salute");
		PLSN A 0 A_JumpIfInventory("Salute2", 1, "Salute");
		PLSN A 0 A_JumpIfInventory("TossGrenade",1,"TossGrenade");
		//PLSN A 0 A_JumpIfInventory("IsRunning",1,"CheckSprint");
		PLSN A 0 A_JumpIfInventory("Unloading",1,"Unload");
		PLSN A 0 A_JumpIfInventory("StartDualWield",1,"DualWield");
		PLSN A 0 A_JumpIfInventory("QuickMelee",1,"DoQuickMelee");
		Loop;
	FixAmmo:
	    PIST F 0 A_Takeinventory("PlasmaAmmo",99999);
		PIST F 0 A_Giveinventory("PlasmaAmmo",50);
		Goto Ready;
	
	/*
	CheckSprint:
		PLSN A 1 A_WeaponReady(WRF_NOFIRE);
		PLSN A 0 A_JumpIfInventory("IsStandingStill", 1, "Ready3");
		PLSN A 0 A_JumpIfInventory("IsTacticalClass", 1, "StartSprint");
		Goto Ready;
		
	StartSprint:
		PLSN A 1 A_WeaponReady(WRF_NOFIRE);
		PLSN A 0 A_Takeinventory("Zoomed",1);
		PLSN A 0 A_Takeinventory("ADSmode",1);
		PLSN A 0 A_ZoomFactor(1.0);
		PLSN A 0 A_JumpIfInventory("UsedStamina", 40, "StopSprintTired");
		
	Sprinting:	
		PLSP A 0 offset(-9,32) ;
		PLSN A 0 offset(-9,32) A_JumpIfInventory("IsStandingStill", 1, "Ready3");
		PLSN A 0 offset(-9,32) A_JumpIfInventory("UsedStamina", 100, "StopSprintTired")
		PLAY A 0 offset(-9,32) ACS_ExecuteAlways(852, 0, 0, 0, 0)//Makes player faster.
		PLSN A 0 offset(-9,32) A_JumpIfInventory("PowerStrength", 1, 2)
		PLSN A 0 offset(-9,32) A_GiveInventory("UsedStamina", 4)
		PLSN A 0 offset(-9,32)
		PLSP A 1 offset(-9,34) A_SetPitch(pitch -0.5)
		PLSP A 1 offset(-6,36) A_SetPitch(pitch -0.5)
		PLSP A 1 offset(-3,38) A_SetPitch(pitch -0.5)
		PLSP A 1 offset(0,38) A_SetPitch(pitch -0.5)
		PLSP A 1 offset(3,36) A_SetPitch(pitch -0.5)
		PLSP A 1 offset(6,34) A_SetPitch(pitch -0.5)
		PLSP A 1 offset(9,32) A_SetPitch(pitch -0.5)
		PLSN A 0 offset(9,32) A_WeaponReady(WRF_NOBOB)
		PLSN A 0 A_JumpIfInventory("Kicking",1,"DoKick")
        PLSN A 0 A_JumpIfInventory("Taunting",1,"Taunt")
        PLSN A 0 A_JumpIfInventory("Reloading",1,"Reload")
		PLSN A 0 offset(-9,32) A_GiveInventory("UsedStamina", 4)
		PLSN A 0 offset(9,33) A_SpawnItemEx("FootStep", 0, 0, 2, 0, 0, -4)
		PLSP A 1 offset(9,34) A_SetPitch(pitch +0.5)
		PLSP A 1 offset(6,36) A_SetPitch(pitch +0.5)
		PLSP A 1 offset(3,38) A_SetPitch(pitch +0.5)
		PLSP A 1 offset(0,38) A_SetPitch(pitch +0.5)
		PLSP A 1 offset(-3,36) A_SetPitch(pitch +0.5)
		PLSP A 1 offset(-6,34) A_SetPitch(pitch +0.5)
		PLSP A 1 offset(-9,32) A_SetPitch(pitch +0.5)
		PLSN A 0 offset(-9,32) A_WeaponReady(WRF_NOBOB)
		PLSN A 0 offset(-9,32) A_JumpIfInventory("IsRunning", 1, "Sprinting")
		Goto StopSprint
		
	StopSprintTired:
		PLSN A 1
		PLAY A 0 ACS_ExecuteAlways(853, 0, 0, 0, 0)//Makes player slower.
		PLSN A 0 A_PlaySound("Tired", 2)
		PLSN A 0 A_TakeInventory("UsedStamina", 2)
		PLSN A 5 A_WeaponReady
		PLSN A 0 A_TakeInventory("UsedStamina", 2)
		PLSN A 5 A_WeaponReady
		PLSN A 0 A_TakeInventory("UsedStamina", 2)
		PLSN A 5 A_WeaponReady
		PLSN A 0 A_TakeInventory("UsedStamina", 2)
		PLSN A 5 A_WeaponReady
		PLSN A 0 A_TakeInventory("UsedStamina", 2)
		PLSN A 5 A_WeaponReady
		Goto Ready
	StopSprint:
		PLSP A 1
		PLSN A 0 A_JumpIfInventory("UsedStamina", 60, "StopSprintTired")
		PLAY A 0 ACS_ExecuteAlways(853, 0, 0, 0, 0)//Makes player slower.
		Goto Ready
	*/	
		
	Deselect:
	    TNT1 A 0
		{
		A_Giveinventory("ScreenTilt",1);
		A_Setroll(0, SPF_INTERPOLATE);
	    A_Takeinventory("ScreenTilt",1);
	    }
		PLSN A 0 A_Takeinventory("Reloading",1);
		PLSN A 0 A_Takeinventory("HasPlasmaWeapon",1);
		PLSN A 0 A_TakeInventory("TossGrenade", 1);
        PLS9 DCBA 1;
		TNT1 A 0 ZWL_QuickLower();
		Wait;
		
	Select:
		TNT1 A 0
		{
		A_Giveinventory("ScreenTilt",1);
		A_Setroll(0, SPF_INTERPOLATE);
	    A_Takeinventory("ScreenTilt",1);
	    }
		PLSN A 0;
		PLSN A 0 A_Takeinventory("StartDualWield",1);
		PLSN A 0 A_Giveinventory("GoSpecial",1);
	    PLSN A 0 A_Giveinventory("HasPlasmaWeapon",1);
		PLSN A 0 A_Takeinventory("FistsSelected",1);
		PLSN A 0 A_Takeinventory("SawSelected",1);
		RIFG A 0 A_Takeinventory("RifleSelected",1);
		PLSN A 0 A_Takeinventory("ShotgunSelected",1);
		PLSN A 0 A_Takeinventory("SSGSelected",1);
		PLSN A 0 A_Takeinventory("MinigunSelected",1);
		PLSN A 0 A_Giveinventory("PlasmaGunSelected",1);
		PLSN A 0 A_Takeinventory("RocketLauncherSelected",1);
		PLSN A 0 A_Takeinventory("GrenadeLauncherSelected",1);
		PLSN A 0 A_Takeinventory("BFGSelected",1);
		PLSN A 0 A_Takeinventory("BFG10kSelected",1);
		PLSN A 0 A_Takeinventory("RailGunSelected",1);
		PLSN A 0 A_Takeinventory("SubMachineGunSelected",1);
		PLSN A 0 A_Takeinventory("RevenantLauncherSelected",1);
		PLSN A 0 A_Takeinventory("LostSoulSelected",1);
		PLSN A 0 A_Takeinventory("FlameCannonSelected",1);
		PLSN A 0 A_Takeinventory("HasBarrel",1);
		PLSN A 0 A_TakeInventory("TossGrenade", 1);
	    PLSN A 0 A_JumpIfInventory("IsPlayingAsPurist", 1, "PuristGun");
		PLSN A 0 A_PlaySound("PLSDRAW");
		SelectAnimation:
        TNT1 A 0 ZWL_QuickRaise();
		PLS9 ABCD 1 Offset(0,32);
		PLSN A 0 A_Takeinventory("StartDualWield",1);
		PLSN A 0 A_GunFlash;
		Goto Ready;
		
	Fire:
		//PLSN A 0 A_CheckReload;
        PLSN A 0 A_JumpIfInventory("Reloading",1,"Reload");
        PLSN A 0 A_JumpIfInventory("PlasmaAmmo",1,2);
        Goto NoAmmo;
        TNT1 AAAA 0;
        PLSN A 0 A_PlaySound("PLSM9", 1);
		PLSN A 0 A_FireCustomMissile("PlasmaFlareSpawn", 0, 0, 0, 0);
		PLSN A 0 A_TakeInventory("DoublePlasmaAmmo", 1);
		PLSN A 0 A_JumpIfInventory("DMgame", 1, "FireDM");
		PLSN A 0 A_SetPitch(Pitch-0.5);
		PLST A 1 BRIGHT //A_FireCustomMissile("Plasma_Ball", 0, 1, 0, -5);
		{
		A_FireCustomMissile("GunFireSmoke", 0, 0, 0, 1, 0, 0);
		ZWL_FireProjectile("Plasma_Ball", 0, -1, offset:(0,0,-5), flags:ZPF_AddPlayerVel);
		}
		PLSN A 0 A_ZoomFactor(1.0);
		PLST B 1;
		PLST C 1;
		PLSN A 0 A_Takeinventory("PlasmaAmmo",1);
		Goto Ready;
		
	FireDM:	
		//PLSN A 0 A_ZoomFactor(0.99)
		PLSN A 0 A_FireCustomMissile("PlasmaFlareSpawn", 0, 0, 0, 0);
		PLST A 1 //A_FireCustomMissile("PlasmaBallDM", 0, 1, 0, 0);
		{
		A_FireCustomMissile("GunFireSmoke", 0, 0, 0, 1, 0, 0);
		ZWL_FireProjectile("PlasmaBallDM", 0, -1, offset:(0,0,-5), flags:ZPF_AddPlayerVel);
		}
		PLSN A 0 A_ZoomFactor(1.0);
		PLST B 1;
		PLST C 1;
		PLSN A 0 A_Takeinventory("PlasmaAmmo",1);
		Goto Ready;

// Charging up secondary ------------------------------------------------------------

    // F A N C Y ZSCRIPT M A G I C HOORAY! 
	AltFire:
        //PLSN A 0 A_JumpIfInventory("Reloading",1,"Reload");
        PLSN A 0 
		{
		 // If we have all our mag spent, and we're empty, Hold.
		 if(Invoker.ChargedAltFire >= 1 && CountInv("PlasmaAmmo") ==0 )
		 {
		 return resolvestate("AltHold");
		 }
		 // If we're empty and have no ammo, we need to reload.
		 else If(CountInv("PlasmaAmmo") ==0 ) 
		 {
		 return resolvestate("NoAmmo");
		 }
		 // We aren't charged fully and we have ammo.
		 else
		 {
		 return resolvestate(null);
		 } 
		}
        TNT1 AAA 0;

		PLSN A 0 A_StartSound("PLSCHARG",1,CHANF_NOSTOP,1);
		PLSA A 1
		{
		 A_weaponoffset(0, 32);
		 A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0);
		 A_FireCustomMissile("GunFireSmoke", 0, 0, 0, 1, 0, 0);
		}
		PLSA B 1
		{
		 A_weaponoffset(0, 33);
		 A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0);
		 A_FireCustomMissile("GunFireSmoke", 0, 0, 0, 1, 0, 0);
		}
		PLSA C 1
		{
		 A_weaponoffset(1, 32);
		 A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0);
		 A_FireCustomMissile("GunFireSmoke", 0, 0, 0, 1, 0, 0);
		}
		PLSA D 1
		{
		 A_weaponoffset(-1, 32);
		 A_Takeinventory("PlasmaAmmo",1);
		 A_Takeinventory("DoublePlasmaAmmo",1);
		 A_FireCustomMissile("GunFireSmoke", 0, 0, 0, 1, 0, 0);
		 invoker.ChargedAltFire++;
		}
		TNT1 A 0
		{
		 // If we Hit Max Mag Capacity, Don't Fire, but instead Hold.
		 if(Invoker.ChargedAltFire == 50)
		 {
		 return resolvestate("AltHold");
		 }
		 // We're Not Full, Continue.
		 return resolvestate(null);
		}
		PLSN A 0 A_ReFire("AltFire"); // Continue charging until we reach 50.
	LetsRock:	
		TNT1 A 0
        {
         switch(invoker.ChargedAltFire)
            {
			    /* 
				Quick Explanation, If i did the projectiles for the case number
				manually, the growth would be roughly absurd. So, we let the cases
				run down non-terminated the more magazine we burn through.
				for example, at case 50 it fires 1 projectile, but its also firing
				the other 49. and it terminates at case 1 because of this.
				*/                            
				case 50: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 49: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 48: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel); 
				case 47: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel); 
				case 46: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel); 
				case 45: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel); 
				case 44: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel); 
				case 43: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 42: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 41: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 40: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 39: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 38: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 37: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 36: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 35: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 34: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 33: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 32: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 31: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 30: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 29: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 28: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 27: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 26: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 25: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 24: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 23: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 22: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 21: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 20: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 19: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 18: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 17: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 16: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 15: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 14: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 13: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 12: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 11: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 10: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 9: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 8: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 7: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 6: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 5: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 4: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 3: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
				case 2: ZWL_FireProjectile("PlasmaBall75", 6, -1, flags:ZPF_AddPlayerVel);
                case 1: 
				ZWL_FireProjectile("PlasmaBall75", 0, -1, flags:ZPF_AddPlayerVel);
                break;
				Case 0:
				break;
				default:
				break;
            }
        }
		
		TNT1 A 0
        {
         switch(invoker.ChargedAltFire)
            {
			    /* 
				Here's how to scale recoil with it too.
				*/                            
				case 50: A_SetPitch(Pitch-0.25);
				case 49: A_SetPitch(Pitch-0.25);
				case 48: A_SetPitch(Pitch-0.25);
				case 47: A_SetPitch(Pitch-0.25);
				case 46: A_SetPitch(Pitch-0.25);
				case 45: A_SetPitch(Pitch-0.25);
				case 44: A_SetPitch(Pitch-0.25);
				case 43: A_SetPitch(Pitch-0.25);
				case 42: A_SetPitch(Pitch-0.25);
				case 41: A_SetPitch(Pitch-0.25);
				case 40: A_SetPitch(Pitch-0.25);
				case 39: A_SetPitch(Pitch-0.25);
				case 38: A_SetPitch(Pitch-0.25);
				case 37: A_SetPitch(Pitch-0.25);
				case 36: A_SetPitch(Pitch-0.25);
				case 35: A_SetPitch(Pitch-0.25);
				case 34: A_SetPitch(Pitch-0.25);
				case 33: A_SetPitch(Pitch-0.25);
				case 32: A_SetPitch(Pitch-0.25);
				case 31: A_SetPitch(Pitch-0.25);
				case 30: A_SetPitch(Pitch-0.25);
				case 29: A_SetPitch(Pitch-0.25);
				case 28: A_SetPitch(Pitch-0.25);
				case 27: A_SetPitch(Pitch-0.25);
				case 26: A_SetPitch(Pitch-0.25);
				case 25: A_SetPitch(Pitch-0.25);
				case 24: A_SetPitch(Pitch-0.25);
				case 23: A_SetPitch(Pitch-0.25);
				case 22: A_SetPitch(Pitch-0.25);
				case 21: A_SetPitch(Pitch-0.25);
				case 20: A_SetPitch(Pitch-0.25);
				case 19: A_SetPitch(Pitch-0.25);
				case 18: A_SetPitch(Pitch-0.25);
				case 17: A_SetPitch(Pitch-0.25);
				case 16: A_SetPitch(Pitch-0.25);
				case 15: A_SetPitch(Pitch-0.25);
				case 14: A_SetPitch(Pitch-0.25);
				case 13: A_SetPitch(Pitch-0.25);
				case 12: A_SetPitch(Pitch-0.25);
				case 11: A_SetPitch(Pitch-0.25);
				case 10: A_SetPitch(Pitch-0.25);
				case 9: A_SetPitch(Pitch-0.25);
				case 8: A_SetPitch(Pitch-0.25);
				case 7: A_SetPitch(Pitch-0.25);
				case 6: A_SetPitch(Pitch-0.25);
				case 5: A_SetPitch(Pitch-0.25);
				case 4: A_SetPitch(Pitch-0.25);
				case 3: A_SetPitch(Pitch-0.25);
				case 2: A_SetPitch(Pitch-0.25);
                case 1: 
				A_SetPitch(Pitch-0.25);
                break;
				Case 0:
				break;
				default:
				break;
            }
        }
		
		PLST A 1 BRIGHT A_Recoil(3);
		PLSN A 0 A_FireCustomMissile("PlasmaFlareSpawn",-5,0,0,0);
        PLSN KLKJ 1;
        PLSN BCD 1;
		PLSN EEEEEEEEEEEE 3 A_FireCustomMissile("SmokeSpawner",0,0,10,5);
		PLSN DCB 1;
        PLSN A 0 A_PlaySound("BEPBEP");
		PLSN A 0 A_PlaySound("BEPBEP", 6);
		Goto Ready;

	    //PLSN A 0 A_PlaySound("PLSFULL", 6, 0.8, 1);
	    //PLSN A 0 A_ReFire;
		Goto Ready3;

// Holding Charge ------------------------------------------------------------

AltHold:
	
	PLSN A 0 A_StartSound("PLSFULL",1,CHANF_NOSTOP,1);
	PLSN A 0 A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0);
	PLSN A 0 A_FireCustomMissile("GunFireSmoke", 0, 0, 0, 1, 0, 0);
	PLSA A 1 BRIGHT offset (0, 32);
	
	PLSN A 0 A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0);
	PLSN A 0 A_FireCustomMissile("GunFireSmoke", 0, 0, 0, 1, 0, 0);
	PLSA C 1 BRIGHT offset (0, 33);
	
	PLSN A 0 A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0);
	PLSN A 0 A_FireCustomMissile("GunFireSmoke", 0, 0, 0, 1, 0, 0);
	PLSA A 1 BRIGHT offset (1, 32);
	
	PLSN A 0 A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0);
	PLSN A 0 A_FireCustomMissile("GunFireSmoke", 0, 0, 0, 1, 0, 0);
	PLSA C 1 BRIGHT offset (-1, 32);
	PLSN A 0 A_ReFire;	
	Goto LetsRock;
	

// Let Fly --------------------------------------------------------------------------
    /*
	LetFly:
	PLSN A 0 A_StopSound(6)
	PLST A 1 A_PlaySound("PLSALTFR", 1)
	PLSN A 0 A_StopSound(6)
	PLSN A 0 A_ZoomFactor(1.0)
	TNT1 A 0 A_JumpIfInventory("DMGame", 1, "LetFlyDM")
	PLSN A 0 A_SetPitch(pitch - 8.0)
	TNT1 AAAA 0 A_FireCustomMissile("PlasmaBall75", -8, 0, -1, 0, 0, random(-2,2))
	TNT1 AA 0 A_FireCustomMissile("PlasmaBall75", 0, 0, -1, 0, 0, 0)
	TNT1 AAAA 0 A_FireCustomMissile("PlasmaBall75", -8, 0, -1, 0, 0, random(-2,2))
	PLST A 1 BRIGHT A_Recoil(3)
		PLSN A 0 A_FireCustomMissile("PlasmaFlareSpawn",-5,0,0,0)
		PLSN A 0 A_Takeinventory("DoublePlasmaAmmo",10)
        PLSN KLKJ 1
        PLSN BCD 1
		PLSN EEEEEEEEEEEE 3 A_FireCustomMissile("SmokeSpawner",0,0,10,5)
		PLSN DCB 1
        PLSN A 0 A_PlaySound("BEPBEP")
		PLSN A 0 A_PlaySound("BEPBEP", 6)
		Goto Ready
		
		
		
	LetFlyDM:
	PLSN A 0 A_SetPitch(pitch - 8.0)
	TNT1 AAAA 0 A_FireCustomMissile("PlasmaBallDM", -8, 0, -1, 0, 0, random(-2,2))
	TNT1 AA 0 A_FireCustomMissile("PlasmaBallDM", 0, 0, -1, 0, 0, 0)
	TNT1 AAAA 0 A_FireCustomMissile("PlasmaBallDM", -8, 0, -1, 0, 0, random(-2,2))
	PLST A 1 BRIGHT A_Recoil(3)
		PLSN A 0 A_FireCustomMissile("PlasmaFlareSpawn",-5,0,0,0)
		PLSN A 0 A_Takeinventory("DoublePlasmaAmmo",10)
        PLSN KLKJ 1
        PLSN BCD 1
		PLSN EEEEEEEEEEEE 3 A_FireCustomMissile("SmokeSpawner",0,0,10,5)
		PLSN DCB 1
        PLSN A 0 A_JumpIfInventory("PlasmaAmmo",1,2)
        Goto Reload
        TNT1 AAAA 0
        PLSN A 0 A_PlaySound("BEPBEP")
		PLSN A 0 A_PlaySound("BEPBEP", 6)
		Goto Ready
	*/	

// Cancel Charge --------------------------------------------------------------------------------------------

/*
	Cancel:

			PLSN A 0 A_TakeInventory("Reloading",1)
			PLSN A 0 A_StopSound(6)
			PLSN A 0 A_PlaySound("decharg", 5)

		PLSA A 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA B 1 BRIGHT A_Giveinventory("PlasmaAmmo",1)
		PLSA C 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA D 1 BRIGHT 
		PLSA A 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA B 1 BRIGHT A_Giveinventory("PlasmaAmmo",1)
		PLSA C 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA D 1 BRIGHT 
		PLSA A 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA B 1 BRIGHT A_Giveinventory("PlasmaAmmo",1)
		PLSA C 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA D 1 BRIGHT 
		PLSA A 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA B 1 BRIGHT A_Giveinventory("PlasmaAmmo",1)
		PLSA C 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA D 1 BRIGHT 
		PLSA A 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA B 1 BRIGHT A_Giveinventory("PlasmaAmmo",1)
		PLSA C 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA D 1 BRIGHT 
		PLSA A 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA B 1 BRIGHT A_Giveinventory("PlasmaAmmo",1)
		PLSA C 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA D 1 BRIGHT A_PlaySound("plscool", 7)
		PLSA A 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA B 1 BRIGHT A_Giveinventory("PlasmaAmmo",1)
		PLSA C 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA D 1 BRIGHT
		PLSA A 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA B 1 BRIGHT A_Giveinventory("PlasmaAmmo",1)
		PLSA C 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA D 1 BRIGHT
		PLSA A 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA B 1 BRIGHT A_Giveinventory("PlasmaAmmo",1)
		PLSA C 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA D 1 BRIGHT
		PLSA A 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA B 1 BRIGHT A_Giveinventory("PlasmaAmmo",1)
		PLSA C 1 BRIGHT A_FireCustomMissile("PlasmaFlareSpawn",0,0,0,0)
		PLSA D 1 BRIGHT

			PLSN A 0 A_TakeInventory("Reloading",1)
			PLSN A 0 A_Giveinventory("DoublePlasmaAmmo",10)
			PLSN A 0 A_PlaySound("BEPBEP", 5, 1.2)
			PLSN A 0 A_ClearReFire

		Goto Ready
*/		

//  ------------------------------------------------------------------------------

	
	Spawn:
	    PLSN A 0;
		PLSN A 0 A_ChangeFLag("THRUACTORS", 1);
		PLAS A 20;
		PLSN A 0 A_SpawnItem("DropedPlasmaGun");
		Stop;
		
	NoAmmo:
		RIFG A 0;
		RIFG A 0 A_ZoomFactor(1.0);
		RIFG A 0 A_Takeinventory("Zoomed",1);
		RIFG A 0 A_Takeinventory("ADSmode",1);
		RIFG A 0 A_JumpIfInventory("TurboReload",1,"TurboReload");
		TNT1 A 0 A_PlaySound("weapons/empty", 4);
		NoAmmo2:
		RIFG A 0 A_JumpIfInventory("TossGrenade",1,"TossGrenade");
	    RIFG A 0 A_JumpIfInventory("Taunting",1,"Taunt");
		RIFG A 0 A_JumpIfInventory("Salute1", 1, "Salute");
		RIFG A 0 A_JumpIfInventory("Salute2", 1, "Salute");
		RIFG A 0 A_JumpIfInventory("IsRunning",1,"CheckSprint");
		RIFG A 0 A_JumpIfInventory("ExecuteDownedEnemy", 1, "DoExecution");
		RIFG A 0 A_JumpIfInventory("Kicking",1,"DoKick");
		PLSN A 5 A_WeaponReady(WRF_ALLOWRELOAD | WRF_NOFIRE);
		RIFG A 0 A_JumpIfInventory("Reloading",1,"Reload");
		RIFG A 0 A_JumpIfInventory("TurboReload",1,"TurboReload");
		TNT1 A 0 A_JumpIfInventory("NoAutoReload", 1, "NoAmmo2");
		RIFG A 0 A_JumpIfInventory("AmmoCell",1,"Reload");
		RIFG A 0 A_JumpIfInventory("FiredPrimary",1,"NoAmmo2");
		Goto Ready3;

    Reload:

		PLSN A 0 A_Takeinventory("Reloading",1);
		PLSN A 0 A_ClearReFire;
		PLSN A 0 A_JumpIfInventory("PlasmaAmmo",50,"Ready");
		PLSN A 0 A_JumpIfInventory("AmmoCell",1,7);

		PLSN A 0 A_PlaySound("BEP", 1);
		PLSR A 4 A_WeaponReady(WRF_NOFIRE);
		PLSN A 0 A_PlaySound("BEP", 2);
		PLSR A 4 A_WeaponReady(WRF_NOFIRE);
		PLSN A 0 A_CheckReload;
        Goto Ready;
        TNT1 AAAA 0;
        //PLSN A 0 A_PlaySound("PLREADY");
		PLSN A 0 A_JumpIfInventory("TurboReload",1,"TurboReload");
        PLSR AB 1;
		PLSN A 0 A_JumpIfInventory("PlasmaAmmo",1,"TacticalReload");
		PLSN A 0 A_FireCustomMissile("PlasmaCaseSpawn",-210,0,20,-20);
		PLSR CDEEEEEEEEEEEEEEEF 1;
        PLSR GHH 1;
		PLSN A 0 A_StartSound("CELLIN",1,CHANF_OVERLAP,1);
		PLSR IIIJJJJJJJJIKLBA 1;
		PSLN A 0 A_StartSound("PLREADY",1,CHANF_OVERLAP,1);
		Goto ReloadingSequence;
	
	TacticalReload:
	    PLSR LKJI 1;
		PLSN A 0 A_StartSound("CELLOUT",1,CHANF_OVERLAP,1);
		PLSR HGF 1;
		PLSR E 15;
		PLSR FGHH 1;
		PLSN A 0 A_StartSound("CELLIN",1,CHANF_OVERLAP,1);
		PLSR I 3;
		PLSR J 8;
		PLSR IKLB 1;
		PLSR A 1;
		PSLN A 0 A_StartSound("PLREADY",1,CHANF_OVERLAP,1);
		Goto ReloadingSequence;
		
	ReloadingSequence:
		TNT1 AAAAAAAAAA 0;
		PLSN A 0 A_JumpIfInventory("PlasmaAmmo",50,15);
		PLSN A 0 A_JumpIfInventory("AmmoCell",1,3);
		Goto Ready;
        TNT1 AAAAAA 0;
		PLSN A 0 A_Giveinventory("PlasmaAmmo",1);
		PLSN A 0 A_Giveinventory("DoublePlasmaAmmo",1);
		PLSN A 0 A_Takeinventory("AmmoCell",1);
		Goto ReloadingSequence;
		TNT1 AAAAAAAA 0;
		
		PLSN A 0 A_Takeinventory("Reloading",1);
        Goto Ready;
		
	TurboReload:
		PLSN BCDE 0;
		Goto ReloadingSequence;
		
		
		
	Unload:

		PLSN A 0 A_Takeinventory("Unloading",1);
		PLSN A 0 A_JumpIfInventory("AmmoCell",1,7);
		Goto Ready;
		TNT1 AAAAA 0;
		PLSN A 0 A_PlaySound("BEP");
		PLSR A 4 A_WeaponReady(WRF_NOFIRE);
		PLSN A 0 A_PlaySound("BEP");
		PLSR A 4 A_WeaponReady(WRF_NOFIRE);
        TNT1 AAAA 0;
        PLSN A 0 A_PlaySound("PLREADY");
        PLSR AB 1;
		PLSR CDJJJJJJ 1;
		PLSR IHGFDECBA 2;
		
	UnloadingSequence:
		PLSN A 0;
		PLSN A 0 A_Takeinventory("Unloading",1);
		PLSN A 0 A_JumpIfInventory("PlasmaAmmo",1,3);
		Goto Ready;
        TNT1 AAAAAAA 0;
		PLSN A 0 A_Takeinventory("PlasmaAmmo",1);
		PLSN A 0 A_Takeinventory("DoublePlasmaAmmo",1);
		PLSN A 0 A_Giveinventory("AmmoCell",1);
		Goto UnloadingSequence;
		
		
	DualWield:
		TNT1 A 1;
		PLSN A 0 A_Takeinventory("StartDualWield",1);
		PLSN A 0 A_JumpIfInventory("DualPlasmaRifles", 1, "GetDual");
		PLSN A 0 A_Print("You must have two identical weapons to dual wield.");
		Goto Ready;
		
	 GetDual:	
		PLSN A 0 A_SetCrosshair(0);
		PLSN A 0 A_Takeinventory("Zoomed",1);
		PLSN A 0 A_Takeinventory("ADSmode",1);
		PLSN A 0 A_TakeInventory("TossGrenade", 1);
		PLSN A 0 A_TakeInventory("Kicking",1);
        PLSN A 0 A_TakeInventory("Taunting",1);
        PLSN A 0 A_TakeInventory("Reloading",1);
		PLSN A 0 A_TakeInventory("Unloading",1);
		PLSN A 0 A_TakeInventory("Salute1", 1);
		PLSN A 0 A_TakeInventory("Salute2", 1);
        PLSN A 0 A_ZoomFactor(1.0);
		PLSN A 0 A_SelectWEapon("DualPlasmaRifles");
		Goto Ready;

	Flashkick:
		PLSK ABC 1;
		PLSK D 13;
		PLSK CBA 1;
		Stop;
	
	FlashMelee:
		PLSK ABC 1;
		PLSK D 1;
		PLSK CBA 1;
		Stop;
		
	AirFlashkick:
	    PLSK ABC 1;
		PLSK D 14;
		PLSK CBA 1;
		Stop;
	
	SlideFlashKick:
	    PLSK ABC 1;
		PLSK D 13;
		Stop;
	
	SlideFlashKickStop:
		PLSK D 10;
		PLSK CBA 1;
		Stop;
	
	}
}