//Tracing projectiles goes here

CLASS Tracer2: FastProjectile
{
DEFAULT
{
//missiletype "TracerTrailMain";
missileheight 7;
	Projectile;
	+RANDOMIZE;
	+FORCEXYBILLBOARD;
	+DONTSPLASH;
	// +BLOODSPLATTER ;
	+NOEXTREMEDEATH;
	damage 0;
	radius 2;
	height 2;
	speed 140;
	renderstyle "ADD";
	alpha 0.9;
	scale .15;
	//Damagetype "Weak"
}
		states
			{
		Spawn:
			TRAC A 1 BRIGHT;
			Loop;
		Death:
			TNT1 A 0;
			TNT1 A 1;
			//TNT1 A 0 A_JumpIfInTargetInventory("IsTacticalClass", 1, "Tactical")
			tnt1 a 2;
			Stop;
			
		XDeath:
			TNT1 A 0;
			Stop;
		
		Tactical:
			TNT1 A 0;
			TNT1 A 0 A_Explode(8, 50);
			Stop;
			}
}

CLASS TracerTrailMain2: Actor
{
DEFAULT
{
Scale 0.03;
alpha 0.8;
+NOGRAVITY;
+NOCLIP;
+DontSplash;
RenderStyle "Add";
}
States
{
Spawn:
PART A 1 Bright A_FadeOut(0.4, 1);
loop;
}
}

Class p_tracer : FastProjectile {
    protected int ripdepth;         //how much health it can pierce through
    protected actor hitvictim;    //the actor that was hit
    Default {
        missiletype "TracerTrailMain2";
        missileheight 7;
		damage 0;
        +RIPPER
        Alpha 1.0;
        Scale 1.0;
        RenderStyle "Add";
        Radius 2;
        Height 2;
        Speed 200;
        +BLOODSPLATTER
        +NOEXTREMEDEATH
        +NOTIMEFREEZE
        //Decal "BlazeChip";
    }
    override void PostBeginPlay() {
        super.PostBeginPlay();
        ripdepth = 0;
    }
    override int SpecialMissileHit(actor victim) {
        if (victim && target && (victim != target)) {    //check that victim and shooter exist
                ripdepth -= 1;                            //reduce ripping "health" by 1
            if (victim != hitvictim) {                     //deal damage only ONCE even if the pellet rips through
                hitvictim = victim;
                victim.DamageMobj(self,target,1,"Bullet");    //10 is the damage value
            }
        }
        if (ripdepth <= 0)        //if it runs out of "health
            return -1;            //die
        else                    //otherwise keep going
            return 1;
    }
    States {
        Spawn:
            TRAC A 1 BRIGHT;
            Loop;
        Death:
        Crash:
		    TNT1 A 0 A_SpawnItemEx ("RicoChet",0,0,-5,0,0,0,0,SXF_NOCHECKPOSITION,0);
            //TNT1 A 1 A_SpawnItemEx("BulletImpact",0,0,0,0,0,0,0);
            Stop;
        XDeath:
            TNT1 A 1 ;
            Stop;
        }
}

Class p_pistol_tracer : FastProjectile {
    protected int ripdepth;         //how much health it can pierce through
    protected actor hitvictim;    //the actor that was hit
    Default {
        missiletype "TracerTrailMain2";
        missileheight 7;
		damage 0;
        +RIPPER
        Alpha 1.0;
        Scale 1.0;
        RenderStyle "Add";
        Radius 2;
        Height 2;
        Speed 200;
        +BLOODSPLATTER
        +NOEXTREMEDEATH
        +NOTIMEFREEZE
        //Decal "BlazeChip";
    }
    override void PostBeginPlay() {
        super.PostBeginPlay();
        ripdepth = 0;
    }
    override int SpecialMissileHit(actor victim) {
        if (victim && target && (victim != target)) {    //check that victim and shooter exist
                ripdepth -= 1;                            //reduce ripping "health" by 1
            if (victim != hitvictim) {                     //deal damage only ONCE even if the pellet rips through
                hitvictim = victim;
                victim.DamageMobj(self,target,20,"Bullet");    //10 is the damage value
            }
        }
        if (ripdepth <= 0)        //if it runs out of "health
            return -1;            //die
        else                    //otherwise keep going
            return 1;
    }
    States {
        Spawn:
            TRAC A 1 BRIGHT;
            Loop;
        Death:
        Crash:
            TNT1 A 0 A_SpawnItemEx ("RicoChet",0,0,-5,0,0,0,0,SXF_NOCHECKPOSITION,0);
			//TNT1 A 1 A_SpawnItemEx("BulletImpact",0,0,0,0,0,0,0);
            Stop;
        XDeath:
            TNT1 A 1 ;
            Stop;
        }
}

Class p_rifle_tracer : FastProjectile {
    protected int ripdepth;         //how much health it can pierce through
    protected actor hitvictim;    //the actor that was hit
    Default {
        missiletype "TracerTrailMain2";
        missileheight 7;
		damage 0;
        +RIPPER
        Alpha 1.0;
        Scale 1.0;
        RenderStyle "Add";
        Radius 2;
        Height 2;
        Speed 200;
        +BLOODSPLATTER
        +NOEXTREMEDEATH
        +NOTIMEFREEZE
        //Decal "BlazeChip";
    }
    override void PostBeginPlay() {
        super.PostBeginPlay();
        ripdepth = 0;
    }
    override int SpecialMissileHit(actor victim) {
        if (victim && target && (victim != target)) {    //check that victim and shooter exist
                ripdepth -= 1;                            //reduce ripping "health" by 1
            if (victim != hitvictim) {                     //deal damage only ONCE even if the pellet rips through
                hitvictim = victim;
                victim.DamageMobj(self,target,40,"Bullet");    //10 is the damage value
            }
        }
        if (ripdepth <= 0)        //if it runs out of "health
            return -1;            //die
        else                    //otherwise keep going
            return 1;
    }
    States {
        Spawn:
            TRAC A 1 BRIGHT;
            Loop;
        Death:
        Crash:
            TNT1 A 0 A_SpawnItemEx ("RicoChet",0,0,-5,0,0,0,0,SXF_NOCHECKPOSITION,0);
			//TNT1 A 1 A_SpawnItemEx("BulletImpact",0,0,0,0,0,0,0);
            Stop;
        XDeath:
            TNT1 A 1 ;
            Stop;
        }
}

Class p_minigun_tracer : FastProjectile {
    protected int ripdepth;         //how much health it can pierce through
    protected actor hitvictim;    //the actor that was hit
    Default {
        missiletype "TracerTrailMain2";
        missileheight 7;
		damage 0;
        +RIPPER
        Alpha 1.0;
        Scale 1.0;
        RenderStyle "Add";
        Radius 2;
        Height 2;
        Speed 200;
        +BLOODSPLATTER
        +NOEXTREMEDEATH
        +NOTIMEFREEZE
        //Decal "BlazeChip";
    }
    override void PostBeginPlay() {
        super.PostBeginPlay();
        ripdepth = 0;
    }
    override int SpecialMissileHit(actor victim) {
        if (victim && target && (victim != target)) {    //check that victim and shooter exist
                ripdepth -= 1;                            //reduce ripping "health" by 1
            if (victim != hitvictim) {                     //deal damage only ONCE even if the pellet rips through
                hitvictim = victim;
                victim.DamageMobj(self,target,20,"Minigun");    //10 is the damage value
            }
        }
        if (ripdepth <= 0)        //if it runs out of "health
            return -1;            //die
        else                    //otherwise keep going
            return 1;
    }
    States {
        Spawn:
            TRAC A 1 BRIGHT;
            Loop;
        Death:
        Crash:
            TNT1 A 0 A_SpawnItemEx ("RicoChet",0,0,-5,0,0,0,0,SXF_NOCHECKPOSITION,0);
			//TNT1 A 1 A_SpawnItemEx("BulletImpact",0,0,0,0,0,0,0);
            Stop;
        XDeath:
            TNT1 A 1 ;
            Stop;
        }
}

Class p_shotgun_tracer : FastProjectile {
    protected int ripdepth;         //how much health it can pierce through
    protected actor hitvictim;    //the actor that was hit
    Default {
        missiletype "TracerTrailMain2";
        missileheight 7;
		damage 0;
        +RIPPER
        Alpha 1.0;
        Scale 1.0;
        RenderStyle "Add";
        Radius 2;
        Height 2;
        Speed 200;
        +BLOODSPLATTER
        +NOEXTREMEDEATH
        +NOTIMEFREEZE
        //Decal "BlazeChip";
    }
    override void PostBeginPlay() {
        super.PostBeginPlay();
        ripdepth = 0;
    }
    override int SpecialMissileHit(actor victim) {
        if (victim && target && (victim != target)) {    //check that victim and shooter exist
                ripdepth -= 1;                            //reduce ripping "health" by 1
            if (victim != hitvictim) {                     //deal damage only ONCE even if the pellet rips through
                hitvictim = victim;
                victim.DamageMobj(self,target,20,"Shotgun");    //10 is the damage value
            }
        }
        if (ripdepth <= 0)        //if it runs out of "health
            return -1;            //die
        else                    //otherwise keep going
            return 1;
    }
    States {
        Spawn:
            TRAC A 1 BRIGHT;
            Loop;
        Death:
        Crash:
            TNT1 A 0 A_SpawnItemEx ("RicoChet",0,0,-5,0,0,0,0,SXF_NOCHECKPOSITION,0);
			//TNT1 A 1 A_SpawnItemEx("BulletImpact",0,0,0,0,0,0,0);
            Stop;
        XDeath:
            TNT1 A 1 ;
            Stop;
        }
}

Class p_SSG_tracer : FastProjectile {
    protected int ripdepth;         //how much health it can pierce through
    protected actor hitvictim;    //the actor that was hit
    Default {
        missiletype "TracerTrailMain2";
        missileheight 7;
		damage 0;
        +RIPPER
        Alpha 1.0;
        Scale 1.0;
        RenderStyle "Add";
        Radius 2;
        Height 2;
        Speed 200;
        +BLOODSPLATTER
        +NOEXTREMEDEATH
        +NOTIMEFREEZE
        //Decal "BlazeChip";
    }
    override void PostBeginPlay() {
        super.PostBeginPlay();
        ripdepth = 0;
    }
    override int SpecialMissileHit(actor victim) {
        if (victim && target && (victim != target)) {    //check that victim and shooter exist
                ripdepth -= 1;                            //reduce ripping "health" by 1
            if (victim != hitvictim) {                     //deal damage only ONCE even if the pellet rips through
                hitvictim = victim;
                victim.DamageMobj(self,target,40,"Shotgun");    //10 is the damage value
            }
        }
        if (ripdepth <= 0)        //if it runs out of "health
            return -1;            //die
        else                    //otherwise keep going
            return 1;
    }
    States {
        Spawn:
            TRAC A 1 BRIGHT;
            Loop;
        Death:
        Crash:
            TNT1 A 0 A_SpawnItemEx ("RicoChet",0,0,-5,0,0,0,0,SXF_NOCHECKPOSITION,0);
			//TNT1 A 1 A_SpawnItemEx("BulletImpact",0,0,0,0,0,0,0);
            Stop;
        XDeath:
            TNT1 A 1 ;
            Stop;
        }
}
/*
Class p_SSGA_tracer : FastProjectile {
    protected int ripdepth;         //how much health it can pierce through
    protected actor hitvictim;    //the actor that was hit
    Default {
        missiletype "TracerTrailMain2";
        missileheight 7;
		damage 0;
        +RIPPER
        Alpha 1.0;
        Scale 1.0;
        RenderStyle "Add";
        Radius 2;
        Height 2;
        Speed 200;
        +BLOODSPLATTER
        +NOEXTREMEDEATH
        +NOTIMEFREEZE
        //Decal "BlazeChip";
    }
    override void PostBeginPlay() {
        super.PostBeginPlay();
        ripdepth = 0;
    }
    override int SpecialMissileHit(actor victim) {
        if (victim && target && (victim != target)) {    //check that victim and shooter exist
                ripdepth -= 1;                            //reduce ripping "health" by 1
            if (victim != hitvictim) {                     //deal damage only ONCE even if the pellet rips through
                hitvictim = victim;
                victim.DamageMobj(self,target,20,"Shotgun");    //10 is the damage value
            }
        }
        if (ripdepth <= 0)        //if it runs out of "health
            return -1;            //die
        else                    //otherwise keep going
            return 1;
    }
    States {
        Spawn:
            TRAC A 1 BRIGHT;
            Loop;
        Death:
        Crash:
            TNT1 A 0 A_SpawnItemEx ("RicoChet",0,0,-5,0,0,0,0,SXF_NOCHECKPOSITION,0);
			//TNT1 A 1 A_SpawnItemEx("BulletImpact",0,0,0,0,0,0,0);
            Stop;
        XDeath:
            TNT1 A 1 ;
            Stop;
        }
}*/
